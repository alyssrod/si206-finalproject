
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
import os
import sqlite3
from requests import post, get 
import requests
import json
import base64
from bs4 import BeautifulSoup 

client_id = '4c16a651c8e94c769cdf11ad1bb033a5'
client_secret = '2b5a3c867ff842b89a166674025eb7cc'

def get_spotify_token():
    auth_string = client_id + ":" + client_secret
    auth_bytes = auth_string.encode("utf-8")
    auth_base64 = str(base64.b64encode(auth_bytes), "utf-8")

    url = 'https://accounts.spotify.com/api/token'
    headers =  {
        'Authorization': 'Basic ' + auth_base64,
        'Content-Type': 'application/x-www-form-urlencoded'
    }  
    data = {'grant_type': 'client_credentials'}
    result = post(url, headers=headers, data=data)
    result_json = json.loads(result.content)
    token = result_json['access_token']
    return token 

def get_spotify_auth_header(token): 
    return {"Authorization": "Bearer " + token}

def spotify_artist_search(token, artist_name):
    url = "https://api.spotify.com/v1/search"
    headers = get_spotify_auth_header(token)
    query = f"q={artist_name}&type=artist&limit=1"
    query_url = url + '?' + query
    result = get(query_url, headers=headers)
    result_json = json.loads(result.content)['artists']['items']

    if len(result_json) == 0:
        print("No artist found with this name.")
        return None

    artist_info = result_json[0]
    print("Artist info:", artist_info)
    
    return artist_info
def spotify_get_songs_by_artist(token, artist_id): 
    
    if not artist_id or 'id' not in artist_id:
        print("No artist found with this name.")
        return None

    artist_id = artist_id['id']
    url = f"https://api.spotify.com/v1/artists/{artist_id}/top-tracks?country=US"
    headers = get_spotify_auth_header(token)
    result = {
        **get_spotify_auth_header(token),
        'Content-Type': 'application/json'
    }
    result = get(url, headers=headers)
    if result.status_code == 200:
        result_json = json.loads(result.content)["tracks"]
        return result_json
    
    else:
        print(f"Error getting top tracks: {result.content}")
        return None
    

token = get_spotify_token()
artist_info = spotify_artist_search(token, "Beyonce")
if artist_info:
    songs = spotify_get_songs_by_artist(token, artist_info)
    if songs:
        for idx, song in enumerate(songs):
            print(f"{idx + 1}. {song['name']}")
    else:
        print("No tracks found for this artist.")
else:
    print("No artist found with this name.")


def setUpDatabase(db_name):
    path = os.path.dirname(os.path.abspath(__file__))
    conn = sqlite3.connect(path+'/'+db_name)
    cur = conn.cursor()
    return cur, conn

cur, conn = setUpDatabase('final-database.db')
    
def store_spotify_data(data, cur, conn): 
    try: 
        cur.execute("CREATE TABLE IF NOT EXISTS spotify_data (song_title TEXT, artist TEXT, album TEXT, popularity INTEGER)")
        for track in data['tracks']['items']:
            song_title = track['name']
            artist = track['artists'][0]['name']
            album = track['album']['name']
            popularity = track['popularity']
            cur.execute("INSERT INTO spotify_data (song_title, artist, album, popularity) VALUES (?, ?, ?, ?)", (song_title, artist, album, popularity))
        conn.commit()
        print("Spotify data stored in the database successfully!")
    except Exception as e: 
        print(f"Error storing Spotify data: {str(e)}")


def get_songlink_data(song_url, title): 

    song_dict={}

    #creates link to search on songlink (uses a link to song)
    base="https://api.song.link/v1-alpha.1/links?url="
    link=song_url
    full_link=base+link

    #gets what platfroms a song appears on
    response=requests.get(full_link)
    data=response.text
    data=json.loads(data)
    links=data["linksByPlatform"] 
    platforms=list(links.keys())
    song_dict[title]=(platforms,len(platforms))
    return(song_dict)

def store_songlink_data(data, cur, conn):
    cur.execute("CREATE TABLE IF NOT EXISTS songlink_data (title TEXT, number_platforms INTEGER)")
    for item in data:    
        title=item
        number=data[item][1]
        cur.execute("INSERT INTO songlink_data (title,number_platforms) VALUES (?, ?)", (title, number))
    conn.commit()
    return None



